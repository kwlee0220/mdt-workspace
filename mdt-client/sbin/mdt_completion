#!/usr/bin/env bash
#
# mdt Bash Completion
# =======================
#
# Bash completion support for the `mdt` command,
# generated by [picocli](https://picocli.info/) version 4.7.6.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `mdt [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'mdt (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_mdt finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_mdt() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} endpoints" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} add" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} remove" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} start" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} stop" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} set" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} resolve" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} simulation" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list instances" ];    then _picocli_mdt_list; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list aas" ];    then _picocli_mdt_list; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list shells" ];    then _picocli_mdt_list; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list submodels" ];    then _picocli_mdt_list; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list operations" ];    then _picocli_mdt_list; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get instance" ];    then _picocli_mdt_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get model" ];    then _picocli_mdt_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get mdt-info" ];    then _picocli_mdt_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get element" ];    then _picocli_mdt_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get shell" ];    then _picocli_mdt_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get submodel" ];    then _picocli_mdt_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get file" ];    then _picocli_mdt_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get instance log" ];    then _picocli_mdt_get_instance; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get model instance" ];    then _picocli_mdt_get_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get model submodels" ];    then _picocli_mdt_get_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get model parameters" ];    then _picocli_mdt_get_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get model operations" ];    then _picocli_mdt_get_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get model compositions" ];    then _picocli_mdt_get_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} set element" ];    then _picocli_mdt_set; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run task" ];    then _picocli_mdt_run; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run aas" ];    then _picocli_mdt_run; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run program" ];    then _picocli_mdt_run; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run http" ];    then _picocli_mdt_run; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run set" ];    then _picocli_mdt_run; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow model" ];    then _picocli_mdt_workflow; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow list" ];    then _picocli_mdt_workflow; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow get" ];    then _picocli_mdt_workflow; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow model list" ];    then _picocli_mdt_workflow_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow model get" ];    then _picocli_mdt_workflow_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow model add" ];    then _picocli_mdt_workflow_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow model remove" ];    then _picocli_mdt_workflow_model; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow model get script" ];    then _picocli_mdt_workflow_model_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow get log" ];    then _picocli_mdt_workflow_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} resolve reference" ];    then _picocli_mdt_resolve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} simulation run" ];    then _picocli_mdt_simulation; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(endpoints)
  local cmds1=(list)
  local cmds2=(get)
  local cmds3=(add)
  local cmds4=(remove)
  local cmds5=(start)
  local cmds6=(stop)
  local cmds7=(set)
  local cmds8=(run)
  local cmds9=(workflow)
  local cmds10=(resolve)
  local cmds11=(simulation)
  local cmds12=(list instances)
  local cmds13=(list aas)
  local cmds14=(list shells)
  local cmds15=(list submodels)
  local cmds16=(list operations)
  local cmds17=(get instance)
  local cmds18=(get model)
  local cmds19=(get mdt-info)
  local cmds20=(get element)
  local cmds21=(get shell)
  local cmds22=(get submodel)
  local cmds23=(get file)
  local cmds24=(get instance log)
  local cmds25=(get model instance)
  local cmds26=(get model submodels)
  local cmds27=(get model parameters)
  local cmds28=(get model operations)
  local cmds29=(get model compositions)
  local cmds30=(set element)
  local cmds31=(run task)
  local cmds32=(run aas)
  local cmds33=(run program)
  local cmds34=(run http)
  local cmds35=(run set)
  local cmds36=(workflow model)
  local cmds37=(workflow list)
  local cmds38=(workflow get)
  local cmds39=(workflow model list)
  local cmds40=(workflow model get)
  local cmds41=(workflow model add)
  local cmds42=(workflow model remove)
  local cmds43=(workflow model get script)
  local cmds44=(workflow get log)
  local cmds45=(resolve reference)
  local cmds46=(simulation run)

  if CompWordsContainsArray "${cmds46[@]}"; then _picocli_mdt_simulation_run; return $?; fi
  if CompWordsContainsArray "${cmds45[@]}"; then _picocli_mdt_resolve_reference; return $?; fi
  if CompWordsContainsArray "${cmds44[@]}"; then _picocli_mdt_workflow_get_log; return $?; fi
  if CompWordsContainsArray "${cmds43[@]}"; then _picocli_mdt_workflow_model_get_script; return $?; fi
  if CompWordsContainsArray "${cmds42[@]}"; then _picocli_mdt_workflow_model_remove; return $?; fi
  if CompWordsContainsArray "${cmds41[@]}"; then _picocli_mdt_workflow_model_add; return $?; fi
  if CompWordsContainsArray "${cmds40[@]}"; then _picocli_mdt_workflow_model_get; return $?; fi
  if CompWordsContainsArray "${cmds39[@]}"; then _picocli_mdt_workflow_model_list; return $?; fi
  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_mdt_workflow_get; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_mdt_workflow_list; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_mdt_workflow_model; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_mdt_run_set; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_mdt_run_http; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_mdt_run_program; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_mdt_run_aas; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_mdt_run_task; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_mdt_set_element; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_mdt_get_model_compositions; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_mdt_get_model_operations; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_mdt_get_model_parameters; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_mdt_get_model_submodels; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_mdt_get_model_instance; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_mdt_get_instance_log; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_mdt_get_file; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_mdt_get_submodel; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_mdt_get_shell; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_mdt_get_element; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_mdt_get_mdtinfo; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_mdt_get_model; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_mdt_get_instance; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_mdt_list_operations; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_mdt_list_submodels; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_mdt_list_shells; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_mdt_list_aas; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_mdt_list_instances; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_mdt_simulation; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_mdt_resolve; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_mdt_workflow; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_mdt_run; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_mdt_set; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_mdt_stop; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_mdt_start; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_mdt_remove; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_mdt_add; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_mdt_get; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_mdt_list; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_mdt_endpoints; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_mdt; return $?;
}

# Generates completions for the options and subcommands of the `mdt` command.
function _picocli_mdt() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="endpoints list get add remove start stop set run workflow resolve simulation"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `endpoints` subcommand.
function _picocli_mdt_endpoints() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_mdt_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="instances aas shells submodels operations"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="instance model mdt-info element shell submodel file"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_mdt_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "add" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 1 && currIndex <= 1 )); then
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_mdt_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--all -a --force -f -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_mdt_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--nowait --all -a --recursive -r -h --help -V --version"
  local arg_opts="--client_conf --loglevel --nthreads -n --poll --timeout"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --nthreads|-n)
      return
      ;;
    --poll)
      return
      ;;
    --timeout)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stop` subcommand.
function _picocli_mdt_stop() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--all -a --recursive -r --nowait -h --help -V --version"
  local arg_opts="--client_conf --loglevel --nthreads -n --poll --timeout"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --nthreads|-n)
      return
      ;;
    --poll)
      return
      ;;
    --timeout)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_mdt_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="element"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_mdt_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="task aas program http set"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `workflow` subcommand.
function _picocli_mdt_workflow() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="model list get"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `resolve` subcommand.
function _picocli_mdt_resolve() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="reference"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `simulation` subcommand.
function _picocli_mdt_simulation() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="run"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `instances` subcommand.
function _picocli_mdt_list_instances() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--long -l --pretty --show-endpoint -v --table -t -h --help -V --version"
  local arg_opts="--client_conf --loglevel --filter -f --output -o --repeat -r --delimiter -d"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --filter|-f)
      return
      ;;
    --output|-o)
      return
      ;;
    --repeat|-r)
      return
      ;;
    --delimiter|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `aas` subcommand.
function _picocli_mdt_list_aas() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--table -t -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --filter -f --delimiter -d --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --filter|-f)
      return
      ;;
    --delimiter|-d)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `shells` subcommand.
function _picocli_mdt_list_shells() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--table -t -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --filter -f --delimiter -d --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --filter|-f)
      return
      ;;
    --delimiter|-d)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `submodels` subcommand.
function _picocli_mdt_list_submodels() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--table -t -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --filter -f --delimiter -d --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --filter|-f)
      return
      ;;
    --delimiter|-d)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `operations` subcommand.
function _picocli_mdt_list_operations() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--table -t -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --filter -f --delimiter -d --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --filter|-f)
      return
      ;;
    --delimiter|-d)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `instance` subcommand.
function _picocli_mdt_get_instance() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="log"
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `model` subcommand.
function _picocli_mdt_get_model() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="instance submodels parameters operations compositions"
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `mdt-info` subcommand.
function _picocli_mdt_get_mdtinfo() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--info -i --parameters -p --operations -o --components -c --dependencies -d -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `element` subcommand.
function _picocli_mdt_get_element() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --output -o --repeat -r --file"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --output|-o)
      return
      ;;
    --repeat|-r)
      return
      ;;
    --file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `shell` subcommand.
function _picocli_mdt_get_shell() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `submodel` subcommand.
function _picocli_mdt_get_submodel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `file` subcommand.
function _picocli_mdt_get_file() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `log` subcommand.
function _picocli_mdt_get_instance_log() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `instance` subcommand.
function _picocli_mdt_get_model_instance() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `submodels` subcommand.
function _picocli_mdt_get_model_submodels() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `parameters` subcommand.
function _picocli_mdt_get_model_parameters() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `operations` subcommand.
function _picocli_mdt_get_model_operations() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `compositions` subcommand.
function _picocli_mdt_get_model_compositions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `element` subcommand.
function _picocli_mdt_set_element() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --value --json --file --path --mimeType"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --value)
      return
      ;;
    --json)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --path)
      return
      ;;
    --mimeType)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `task` subcommand.
function _picocli_mdt_run_task() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `aas` subcommand.
function _picocli_mdt_run_aas() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--update -u --showResult -h --help -V --version"
  local arg_opts="--client_conf --loglevel --submodel --timeout --poll --operation"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --submodel)
      return
      ;;
    --timeout)
      return
      ;;
    --poll)
      return
      ;;
    --operation)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `program` subcommand.
function _picocli_mdt_run_program() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --submodel --timeout --workingDirectory"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --submodel)
      return
      ;;
    --timeout)
      return
      ;;
    --workingDirectory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "program" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `http` subcommand.
function _picocli_mdt_run_http() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --submodel --timeout --endpoint --opId --poll"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --submodel)
      return
      ;;
    --timeout)
      return
      ;;
    --endpoint)
      return
      ;;
    --opId)
      return
      ;;
    --poll)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_mdt_run_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `model` subcommand.
function _picocli_mdt_workflow_model() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list get add remove"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_mdt_workflow_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--table -t --long -l -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --glob -g --delimiter -d --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --glob|-g)
      return
      ;;
    --delimiter|-d)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_workflow_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="log"
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_mdt_workflow_model_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--table -t --long -l -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --glob -g --delimiter -d --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --glob|-g)
      return
      ;;
    --delimiter|-d)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_workflow_model_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="script"
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_mdt_workflow_model_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--force -f -h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "add" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_mdt_workflow_model_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--all -a -h --help -V --version"
  local arg_opts="--client_conf --loglevel --glob -g"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --glob|-g)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `script` subcommand.
function _picocli_mdt_workflow_model_get_script() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --mdt-endpoint --mdt-client-docker"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --mdt-endpoint)
      return
      ;;
    --mdt-client-docker)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `log` subcommand.
function _picocli_mdt_workflow_get_log() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel --pod"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --pod)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `reference` subcommand.
function _picocli_mdt_resolve_reference() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--client_conf --loglevel"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_mdt_simulation_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--use_endpoint -e --nowait -v -h --help -V --version"
  local arg_opts="--client_conf --loglevel --timeout -t --poll"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --client_conf)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --loglevel)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --poll)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `mdt`, `mdt.sh`, and `mdt.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_mdt` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_mdt -o default mdt mdt.sh mdt.bash
